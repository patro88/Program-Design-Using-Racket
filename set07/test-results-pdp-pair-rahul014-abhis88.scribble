#lang scribble/base
@(require scribble/manual)
@title{CS5010 - Problem Set 08 - Test Results}
@author{pdp-pair-rahul014-abhis88}
This test suite tests your implementation of Problem Set 08
@section{File: robot.rkt}
Tests your implementation of robot
@subsection{Test-Group: Simple cases (3 Points)}
@margin-note[#:left? #t]{3/3}

@subsubsection{Test (equality, 1/2 partial points)}

@para{The robot is already at the target}
Input:
@racketblock{@(path '(1 1) '(1 1) empty)
}
Expected Output:
@racketblock{@empty
}
Expected Output Value:
@racketblock{@()
}
Correct
@subsubsection{Test (predicate, 1/2 partial points)}

@para{Simple move towards south west}
Input:
@racketblock{@(path '(1 1) '(10 10) empty)
}
Output should match:
@racketblock{@(check-moves '(1 1) '(10 10))
}
Correct
@subsubsection{Test (predicate, 1/2 partial points)}

@para{Simple move towards north east}
Input:
@racketblock{@(path '(10 10) '(1 1) empty)
}
Output should match:
@racketblock{@(check-moves '(10 10) '(1 1))
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Obstacle on target}
Input:
@racketblock{@(path '(1 1) '(10 10) '((10 10)))
}
Expected Output:
@racketblock{@false
}
Expected Output Value:
@racketblock{@#f
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Cannot move from start}
Input:
@racketblock{@(path '(1 1) '(10 10) '((2 1) (1 2)))
}
Expected Output:
@racketblock{@false
}
Expected Output Value:
@racketblock{@#f
}
Correct
@subsection{Test-Group: Simple movement where path exists given normal obstacles (1 Points)}
@margin-note[#:left? #t]{1/1}

@para{Common Definitions}

@racketblock{@(define VERTICAL-WALL '((2 1) (2 2) (2 3)))
}@racketblock{@(define HORIZONTAL-WALL '((1 3) (2 3) (3 3) (4 3) (5 3) (6 3) (7 3)))
}

@subsubsection{Test (predicate)}

@para{Move east with straight wall in between}
Input:
@racketblock{@(path '(1 1) '(4 1) VERTICAL-WALL)
}
Output should match:
@racketblock{@(check-moves '(1 1) '(4 1))
}
Correct
@subsubsection{Test (predicate)}

@para{Move south west with horizontal wall below}
Input:
@racketblock{@(path '(1 1) '(5 5) HORIZONTAL-WALL)
}
Output should match:
@racketblock{@(check-moves '(1 1) '(5 5))
}
Correct
@subsection{Test-Group: Movement through a maze (2 Points)}
@margin-note[#:left? #t]{2/2}

@para{Common Definitions}

@racketblock{@(define MAZE
  '((3 1)
    (3 2)
    (3 3)
    (3 4)
    (5 4)
    (5 3)
    (5 2)
    (5 5)
    (5 6)
    (5 7)
    (6 7)
    (7 7)
    (7 6)
    (7 5)
    (7 4)
    (7 3)
    (7 2)
    (7 1)))
}@racketblock{@(define CROSS-WALL
  '((4 2)
    (4 3)
    (4 4)
    (4 5)
    (4 6)
    (4 7)
    (2 4)
    (3 4)
    (5 4)
    (6 4)
    (7 4)
    (8 4)))
}

@subsubsection{Test (predicate, 1 partial points)}

@para{Move through a maze}
Input:
@racketblock{@(path '(1 1) '(6 4) MAZE)
}
Output should match:
@racketblock{@(check-moves '(1 1) '(6 4))
}
Correct
@subsubsection{Test (predicate, 1 partial points)}

@para{Move around cross to opposite side}
Input:
@racketblock{@(path '(3 5) '(5 3) CROSS-WALL)
}
Output should match:
@racketblock{@(check-moves '(3 5) '(5 3))
}
Correct
@subsection{Test-Group: Unreachable due to blocked off obstacles (1 Points)}
@margin-note[#:left? #t]{1/1}

@para{Common Definitions}

@racketblock{@(define BOX
  '((4 4)
    (5 4)
    (6 4)
    (7 4)
    (8 4)
    (8 5)
    (8 6)
    (8 7)
    (8 8)
    (8 9)
    (7 9)
    (6 9)
    (5 9)
    (4 9)
    (4 8)
    (4 7)
    (4 6)
    (4 5)))
}

@subsubsection{Test (equality, 1 partial points)}

@para{No path to a target which is blocked off}
Input:
@racketblock{@(path '(1 1) '(6 6) BOX)
}
Expected Output:
@racketblock{@false
}
Expected Output Value:
@racketblock{@#f
}
Correct
@section{File: obstacles.rkt}
Tests your implementation of blocks-to-obstacles
@subsection{Test-Group:  (8 Points)}
@margin-note[#:left? #t]{8/8}

@subsubsection{Test (equality, 1/2 partial points)}

@para{Two equal PositionSets}
Input:
@racketblock{@(position-set-equal?
 '((1 3) (2 7) (99 152) (31 1000))
 '((31 1000) (2 7) (1 3) (99 152)))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Normal obstacle}
Input:
@racketblock{@(obstacle? '((1 2) (2 3) (1 4) (2 5)))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Larger obstacle}
Input:
@racketblock{@(obstacle? '((1 1) (2 2) (3 3) (2 4) (3 5) (2 6) (3 7) (4 8)))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Single block is an obstacle.}
Input:
@racketblock{@(obstacle? '((1 1)))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Two single block obstacles sharing a corner should be an obstacle}
Input:
@racketblock{@(obstacle? '((2 3) (3 2)))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Two obstacles sharing an edge should not be an obstacle}
Input:
@racketblock{@(obstacle? '((1 3) (2 4) (3 4) (4 5)))
}
Expected Output:
@racketblock{@false
}
Expected Output Value:
@racketblock{@#f
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Single obstacle}
Input:
@racketblock{@(set-equal? (blocks-to-obstacles '((1 1))) '(((1 1))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{One obstacle}
Input:
@racketblock{@(set-equal? (blocks-to-obstacles '((2 1) (1 2))) '(((1 2)) ((2 1))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1 partial points)}

@para{Side by side blocks do not comprise an obstacle}
Input:
@racketblock{@(set-equal?
 (blocks-to-obstacles '((1 1) (1 2) (1 3) (2 5) (3 5) (4 5)))
 '(((1 1)) ((1 2)) ((1 3)) ((2 5)) ((3 5)) ((4 5))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1 partial points)}

@para{Contains multiple obstacles.}
Input:
@racketblock{@(set-equal?
 (blocks-to-obstacles '((1 2) (1 3) (2 3) (3 2) (3 4) (4 1) (4 4)))
 '(((1 2) (2 3) (3 4) (3 2) (4 1)) ((1 3)) ((4 4))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1 partial points)}

@para{One big obstacle}
Input:
@racketblock{@(set-equal?
 (blocks-to-obstacles
  '((1 1)
    (2 2)
    (3 3)
    (4 4)
    (1 3)
    (2 4)
    (3 1)
    (4 2)
    (5 3)
    (5 1)
    (6 2)))
 '(((1 1)
    (2 2)
    (3 3)
    (4 4)
    (1 3)
    (2 4)
    (3 1)
    (4 2)
    (5 3)
    (5 1)
    (6 2))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Big obstacle}
Input:
@racketblock{@(set-equal?
 (blocks-to-obstacles
  '((1 1) (2 2) (1 3) (2 4) (1 5) (2 6) (1 7) (3 3) (4 4) (3 5)))
 '(((1 1) (2 2) (1 3) (2 4) (1 5) (2 6) (1 7) (3 3) (4 4) (3 5))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@subsubsection{Test (equality, 1/2 partial points)}

@para{Obstacle at a distance}
Input:
@racketblock{@(set-equal?
 (blocks-to-obstacles '((1 1000000) (2 1000001) (1000000 1000000)))
 '(((1 1000000) (2 1000001)) ((1000000 1000000))))
}
Expected Output:
@racketblock{@true
}
Expected Output Value:
@racketblock{@#t
}
Correct
@section{Results}
Successes: 23
@linebreak{} Wrong Outputs: 0
@linebreak{} Errors: 0
@linebreak{} Achieved Points: 15
@linebreak{} Total Points (rounded): 15/15
